from collections.abc import Iterable
from typing import Optional, TypeVar

Vertex = TypeVar("Vertex", int)
Simplex = TypeVar("Simplex", list[Vertex])

class SimplicialComplex:
    def __init__(self, facets: Iterable[Vertex]) -> None: ...
    def compute_betti_number(self, dim: int) -> int: ...
    def compute_betti_numbers(self, dimensions: Optional[list[int]]) -> list[int]: ...
    def is_connected(self) -> bool: ...
    def add_simplex(self) -> None: ...
    def union(self) -> "SimplicialComplex": ...
    def k_faces(self, dim: int) -> list[Simplex]: ...
    
    @property
    def betti_numbers(self) -> list[int]: ...
    @property
    def dimension(self) -> int: ...
    @property
    def facets(self) -> list[Simplex]: ...
    @property
    def simplices(self) -> list[Simplex]: ...